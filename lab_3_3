import pandas as pd
import os
import tensorflow as tf
import matplotlib.pyplot as plt
import seaborn as sns
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Activation, Input
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error

# regression vs classification
if __name__ == '__main__':

    output = r'your path'
    os.makedirs(output, exist_ok=True)
    path = r'your path'
    seed = 123857

    df = pd.read_csv(path)

    numerical_df = df.select_dtypes(include=['int64', 'float64'])
    in_feat = numerical_df.drop(columns=['MPG_City']).columns
    out_feat = 'MPG_City'
    X = df[in_feat]
    y = df[out_feat]

    #graphs
    plt.figure()
    sns.histplot(y, kde=True, bins=15)
    plt.title('Histo')
    plt.xlabel('mpg city')
    plt.ylabel('Freq')
    plt.tight_layout()
    plt.savefig(os.path.join(output, 'histo.png'))
    plt.close()

    #heatmap
    plt.figure(figsize=(10, 8))
    sns.heatmap(numerical_df.corr(), annot=True, cmap='coolwarm')
    plt.title('Correlation')
    plt.tight_layout()
    plt.savefig(os.path.join(output, 'heatmap.png'))
    plt.close()

    #Collinearity
    sns.pairplot(df[in_feat], corner=True)
    plt.suptitle("Collinearity Plot", y=1.02)
    plt.savefig(os.path.join(output, 'collinearity.png'))
    plt.close()

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=123)

    model = Sequential()
    model.add(Input(shape=(len(in_feat),)))
    model.add(Dense(128, activation='relu'))
    model.add(Dense(1)) 

    model.compile(optimizer='adam', loss='mean_squared_error', metrics=['mae'])

    model.fit(X_train, y_train, epochs=10, verbose=1)

    y_pred = model.predict(X_test).flatten()
    mae = mean_absolute_error(y_test, y_pred)
    print(f"MAE: {mae:.2f}")

    #residual
    residuals = y_test.values - y_pred
    plt.figure()
    plt.scatter(y_test, residuals)
    plt.hlines(0, y_test.min(), y_test.max(), colors='red')
    plt.xlabel("actual")
    plt.ylabel("residuals")
    plt.title("residual")
    plt.tight_layout()
    plt.savefig(os.path.join(output, 'residual.png'))
    plt.close()



